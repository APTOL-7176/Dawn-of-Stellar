#!/usr/bin/env python3
"""
ÏïàÏ†ïÏ†ÅÏù∏ ÌôîÎ©¥ Ï∂úÎ†• ÏãúÏä§ÌÖú
ANSI ÏÉâÏÉÅ ÏΩîÎìúÎ°ú Ïù∏Ìïú ÌôîÎ©¥ Íπ®Ïßê Î∞©ÏßÄ
"""

import os
import re
import time
from typing import List, Optional
from .combat_visual import Color

class StableDisplay:
    """ÏïàÏ†ïÏ†ÅÏù∏ ÌôîÎ©¥ Ï∂úÎ†• ÌÅ¥ÎûòÏä§"""
    
    def __init__(self, width: int = 80, height: int = 25):
        self.width = width
        self.height = height
        self.buffer = []
        self.last_output = ""
        
    def strip_ansi(self, text: str) -> str:
        """ANSI ÏÉâÏÉÅ ÏΩîÎìú Ï†úÍ±∞"""
        ansi_escape = re.compile(r'\x1B(?:[@-Z\\-_]|\[[0-?]*[ -/]*[@-~])')
        return ansi_escape.sub('', text)
    
    def get_visible_length(self, text: str) -> int:
        """Ïã§Ï†ú Î≥¥Ïù¥Îäî ÌÖçÏä§Ìä∏ Í∏∏Ïù¥ Î∞òÌôò"""
        return len(self.strip_ansi(text))
    
    def safe_print(self, text: str, width: Optional[int] = None):
        """ÏïàÏ†ÑÌïú Ï∂úÎ†• - Í∏∏Ïù¥ Ï†úÌïú"""
        if width is None:
            width = self.width
            
        # ANSI ÏΩîÎìúÎ•º Í≥†Î†§Ìïú ÏïàÏ†ÑÌïú Ï∂úÎ†•
        visible_len = self.get_visible_length(text)
        
        if visible_len > width:
            # ÌÖçÏä§Ìä∏Í∞Ä ÎÑàÎ¨¥ Í∏∏Î©¥ ÏûêÎ•¥Í∏∞ (Í≥µÎ∞± Ïú†ÏßÄ)
            stripped = self.strip_ansi(text)
            truncated = stripped[:width-3] + " ..."
            print(truncated)
        else:
            print(text)
    
    def clear_screen(self):
        """ÌôîÎ©¥ ÏßÄÏö∞Í∏∞"""
        os.system('cls' if os.name == 'nt' else 'clear')
    
    def create_box(self, content: List[str], title: str = "", border_char: str = "=") -> List[str]:
        """Î∞ïÏä§ ÌòïÌÉúÎ°ú ÎÇ¥Ïö© Í∞êÏã∏Í∏∞"""
        if not content:
            return []
        
        # ÎÇ¥Ïö©Ïùò ÏµúÎåÄ ÎÑàÎπÑ Í≥ÑÏÇ∞
        max_width = max(self.get_visible_length(line) for line in content)
        box_width = min(max_width + 4, self.width)
        
        lines = []
        
        # ÏÉÅÎã® Í≤ΩÍ≥Ñ
        if title:
            title_line = f" {title} "
            title_padding = (box_width - len(title_line)) // 2
            lines.append(border_char * title_padding + title_line + border_char * (box_width - title_padding - len(title_line)))
        else:
            lines.append(border_char * box_width)
        
        # ÎÇ¥Ïö©
        for line in content:
            visible_len = self.get_visible_length(line)
            padding = box_width - visible_len - 3
            if padding > 0:
                lines.append(f"| {line}{' ' * padding}|")
            else:
                # ÎÑàÎ¨¥ Í∏¥ Ï§ÑÏùÄ ÏûêÎ•¥Í∏∞ (Í≥µÎ∞± Ïú†ÏßÄ)
                stripped = self.strip_ansi(line)
                truncated = stripped[:box_width-6] + " ..."
                lines.append(f"| {truncated} |")
        
        # ÌïòÎã® Í≤ΩÍ≥Ñ
        lines.append(border_char * box_width)
        
        return lines
    
    def show_simple_map(self, map_lines: List[str], player_info: str = ""):
        """Í∞ÑÎã®ÌïòÍ≥† ÏïàÏ†ïÏ†ÅÏù∏ Îßµ ÌëúÏãú"""
        self.clear_screen()
        
        # Ìó§Îçî
        header = f"{Color.BRIGHT_CYAN}=== DAWN OF STELLAR ==={Color.RESET}"
        self.safe_print(header, self.width)
        self.safe_print("", self.width)
        
        # Îßµ ÌëúÏãú (ÏïàÏ†ÑÌïú Í∏∏Ïù¥Î°ú)
        map_width = min(60, self.width - 4)
        for line in map_lines[:20]:  # ÏµúÎåÄ 20Ï§Ñ
            # ANSI ÏΩîÎìúÍ∞Ä ÏûàÎäî Í≤ΩÏö∞ Ï≤òÎ¶¨
            visible_len = self.get_visible_length(line)
            if visible_len > map_width:
                # ÎÑàÎ¨¥ Í∏¥ Ï§Ñ ÏûêÎ•¥Í∏∞
                stripped = self.strip_ansi(line)
                line = stripped[:map_width]
            
            self.safe_print(f"  {line}", self.width)
        
        # ÌîåÎ†àÏù¥Ïñ¥ Ï†ïÎ≥¥
        if player_info:
            self.safe_print("", self.width)
            self.safe_print(f"{Color.YELLOW}ÌååÌã∞ ÏÉÅÌÉú:{Color.RESET}", self.width)
            for info_line in player_info.split('\n'):
                if info_line.strip():
                    self.safe_print(f"  {info_line}", self.width)
    
    def show_combat_simple(self, party: List, enemies: List, current_char=None):
        """Í∞ÑÎã®ÌïòÍ≥† ÏïàÏ†ïÏ†ÅÌïú Ï†ÑÌà¨ ÌôîÎ©¥ - ATB/MP Í∞ïÌôî Î≤ÑÏ†Ñ"""
        self.clear_screen()
        
        # Ìó§Îçî
        self.safe_print(f"{Color.BRIGHT_RED}{'='*70}{Color.RESET}")
        self.safe_print(f"{Color.BRIGHT_YELLOW}  ‚öîÔ∏è  Ï†ÑÌà¨ ÏßÑÌñâ Ï§ë - ATB ÏãúÏä§ÌÖú  ‚öîÔ∏è{Color.RESET}")
        self.safe_print(f"{Color.BRIGHT_RED}{'='*70}{Color.RESET}")
        self.safe_print("")
        
        # ÌååÌã∞ ÏÉÅÌÉú (ATB/MP Ï∂îÍ∞Ä)
        self.safe_print(f"{Color.BRIGHT_BLUE}üë• ÏïÑÍµ∞ ÌååÌã∞:{Color.RESET}")
        self.safe_print("-" * 65)
        for char in party:
            if char.is_alive:
                name_color = Color.BRIGHT_GREEN if char == current_char else Color.WHITE
                status = "‚ö°" if char == current_char else "  "
                
                # HP ÏÉÅÌÉú
                hp_ratio = char.current_hp / char.max_hp if char.max_hp > 0 else 0
                if hp_ratio > 0.7:
                    hp_color = Color.GREEN
                elif hp_ratio > 0.3:
                    hp_color = Color.YELLOW
                else:
                    hp_color = Color.RED
                
                # MP ÏÉÅÌÉú
                mp_ratio = char.current_mp / char.max_mp if char.max_mp > 0 else 0
                if mp_ratio > 0.5:
                    mp_color = Color.BRIGHT_BLUE
                elif mp_ratio > 0.2:
                    mp_color = Color.BLUE
                else:
                    mp_color = Color.BRIGHT_BLACK
                
                # ATB ÏÉÅÌÉú
                atb_gauge = getattr(char, 'atb_gauge', 0)
                if atb_gauge >= 1000:
                    atb_display = f"{Color.BRIGHT_CYAN}‚ö°READY{Color.RESET}"
                    atb_bar = f"{Color.BRIGHT_CYAN}{'‚ñà'*10}{Color.RESET}"
                else:
                    atb_percent = int(atb_gauge / 10)  # 1000 Ïä§ÏºÄÏùºÏùÑ 100%Î°ú Î≥ÄÌôò
                    atb_display = f"{Color.CYAN}{atb_percent:3}%{Color.RESET}"
                    filled = int(atb_gauge / 100)  # 1000 Ïä§ÏºÄÏùºÏóê ÎßûÍ≤å Ï°∞Ï†ï
                    atb_bar = f"{Color.CYAN}{'‚ñà'*filled}{Color.BRIGHT_BLACK}{'‚ñë'*(10-filled)}{Color.RESET}"
                
                # Î†àÎ≤® ÌëúÏãú Ï∂îÍ∞Ä
                level_display = f"Lv.{getattr(char, 'level', 1):2}"
                
                # Ï≤´ Î≤àÏß∏ Ï§Ñ: Í∏∞Î≥∏ Ï†ïÎ≥¥ (Î†àÎ≤® Ï∂îÍ∞Ä)
                info1 = f"{status} {name_color}{char.name:10}{Color.RESET} {Color.BRIGHT_WHITE}{level_display}{Color.RESET} "
                info1 += f"HP:{hp_color}{char.current_hp:3}/{char.max_hp:3}{Color.RESET} "
                info1 += f"MP:{mp_color}{char.current_mp:3}/{char.max_mp:3}{Color.RESET} "
                info1 += f"BRV:{Color.YELLOW}{char.brave_points:4}{Color.RESET}"
                
                # Îëê Î≤àÏß∏ Ï§Ñ: ATBÏôÄ ÏÉÅÌÉú (ATB % Ïò§Î•∏Ï™ΩÏúºÎ°ú)
                info2 = f"     ATB: [{atb_bar}]   {atb_display}"
                
                # ÏÉÅÌÉú Ïù¥ÏÉÅ ÌëúÏãú
                if hasattr(char, 'is_broken') and char.is_broken:
                    info2 += f" {Color.BRIGHT_RED}[BREAK]{Color.RESET}"
                elif hasattr(char, 'status_manager') and char.status_manager.effects:
                    info2 += f" {Color.YELLOW}[BUFF]{Color.RESET}"
                
                # ÏÉÅÏ≤ò Ï†ïÎ≥¥
                if hasattr(char, 'wounds') and char.wounds > 0:
                    info2 += f" {Color.RED}ü©∏ WOUND:{char.wounds}{Color.RESET}"
                
                self.safe_print(f"  {info1}")
                self.safe_print(f"  {info2}")
                self.safe_print("")
        
        self.safe_print("")
        
        # Ï†Å ÏÉÅÌÉú (ATB Ï∂îÍ∞Ä)
        self.safe_print(f"{Color.BRIGHT_RED}üëπ Ï†ÅÍµ∞:{Color.RESET}")
        self.safe_print("-" * 65)
        for enemy in enemies:
            if enemy.is_alive:
                name_color = Color.BRIGHT_RED if enemy == current_char else Color.WHITE
                status = "‚ö°" if enemy == current_char else "  "
                
                # HP ÏÉÅÌÉú
                hp_ratio = enemy.current_hp / enemy.max_hp if enemy.max_hp > 0 else 0
                if hp_ratio > 0.7:
                    hp_color = Color.GREEN
                elif hp_ratio > 0.3:
                    hp_color = Color.YELLOW
                else:
                    hp_color = Color.RED
                
                # ATB ÏÉÅÌÉú
                atb_gauge = getattr(enemy, 'atb_gauge', 0)
                if atb_gauge >= 1000:
                    atb_display = f"{Color.BRIGHT_CYAN}‚ö°READY{Color.RESET}"
                    atb_bar = f"{Color.BRIGHT_CYAN}{'‚ñà'*10}{Color.RESET}"
                else:
                    atb_percent = int(atb_gauge / 10)  # 1000 Ïä§ÏºÄÏùºÏùÑ 100%Î°ú Î≥ÄÌôò
                    atb_display = f"{Color.CYAN}{atb_percent:3}%{Color.RESET}"
                    filled = int(atb_gauge / 100)  # 1000 Ïä§ÏºÄÏùºÏóê ÎßûÍ≤å Ï°∞Ï†ï
                    atb_bar = f"{Color.CYAN}{'‚ñà'*filled}{Color.BRIGHT_BLACK}{'‚ñë'*(10-filled)}{Color.RESET}"
                
                # Ï≤´ Î≤àÏß∏ Ï§Ñ: Í∏∞Î≥∏ Ï†ïÎ≥¥
                info1 = f"{status} {name_color}{enemy.name:12}{Color.RESET} "
                info1 += f"HP:{hp_color}{enemy.current_hp:3}/{enemy.max_hp:3}{Color.RESET} "
                info1 += f"BRV:{Color.YELLOW}{enemy.brave_points:4}{Color.RESET}"
                
                # Îëê Î≤àÏß∏ Ï§Ñ: ATB (ATB % Ïò§Î•∏Ï™ΩÏúºÎ°ú)
                info2 = f"     ATB: [{atb_bar}]   {atb_display}"
                
                if hasattr(enemy, 'is_broken') and enemy.is_broken:
                    info2 += f" {Color.BRIGHT_RED}[BREAK]{Color.RESET}"
                
                self.safe_print(f"  {info1}")
                self.safe_print(f"  {info2}")
                self.safe_print("")
        
        self.safe_print(f"{Color.BRIGHT_RED}{'='*70}{Color.RESET}")
    
    def show_message(self, message: str, message_type: str = "info"):
        """Í∞ÑÎã®Ìïú Î©îÏãúÏßÄ ÌëúÏãú"""
        if message_type == "error":
            color = Color.BRIGHT_RED
            prefix = "‚ùå"
        elif message_type == "success":
            color = Color.BRIGHT_GREEN
            prefix = "‚úÖ"
        elif message_type == "warning":
            color = Color.BRIGHT_YELLOW
            prefix = "‚ö†Ô∏è"
        else:
            color = Color.WHITE
            prefix = "‚ÑπÔ∏è"
        
        formatted_msg = f"{color}{prefix} {message}{Color.RESET}"
        self.safe_print(formatted_msg)
    
    def show_menu(self, title: str, options: List[str], selected: int = -1):
        """ÏïàÏ†ÑÌïú Î©îÎâ¥ ÌëúÏãú"""
        self.safe_print(f"\n{Color.BRIGHT_CYAN}{title}{Color.RESET}")
        self.safe_print("-" * len(title))
        
        for i, option in enumerate(options):
            if i == selected:
                self.safe_print(f"{Color.BRIGHT_YELLOW}‚ñ∫ {option}{Color.RESET}")
            else:
                self.safe_print(f"  {option}")
    
    def pause_for_input(self, prompt: str = "Í≥ÑÏÜçÌïòÎ†§Î©¥ ÏïÑÎ¨¥ ÌÇ§ÎÇò ÎàÑÎ•¥ÏÑ∏Ïöî..."):
        """ÏûÖÎ†• ÎåÄÍ∏∞"""
        self.safe_print(f"\n{Color.DIM}{prompt}{Color.RESET}")
        
        # AI ÏûêÎèô Î™®Îìú Ï≤¥ÌÅ¨ (Ï†ÑÏó≠ÏóêÏÑú ÌôïÏù∏)
        import sys
        if hasattr(sys.modules.get('__main__'), 'ai_auto_mode') and sys.modules.get('__main__').ai_auto_mode:
            self.safe_print(f"{Color.GREEN}ü§ñ AI ÏûêÎèô Î™®Îìú: ÏûêÎèôÏúºÎ°ú Í≥ÑÏÜç ÏßÑÌñâÌï©ÎãàÎã§.{Color.RESET}")
            import time
            time.sleep(0.3)  # 0.3Ï¥à ÎåÄÍ∏∞
        else:
            input()

# Ï†ÑÏó≠ Ïù∏Ïä§ÌÑ¥Ïä§
stable_display = StableDisplay()

def get_stable_display():
    """ÏïàÏ†ïÏ†ÅÏù∏ ÎîîÏä§ÌîåÎ†àÏù¥ Ïù∏Ïä§ÌÑ¥Ïä§ Î∞òÌôò"""
    return stable_display
